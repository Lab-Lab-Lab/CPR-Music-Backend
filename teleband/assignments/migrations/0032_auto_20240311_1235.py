# Generated by Django 3.2.11 on 2024-03-11 16:35

from django.db import migrations

NEA_CONDITIONS = ["Aural", "Theoretical", "Exploratory"]
NEA_INSTRUCTIONS = {
    "Aural": "<h3>INSTRUCTIONS</h3><ol><li>Now that you know the melody and bass line, think like a composer and create a counter-melody that would sound good when played with the melody and bass line.</li><li>To practice creating a counter-melody, first review the main melody and bass line by performing them with the accompaniment track.</li><li>Experiment with changing just a few notes from the melody. Continue until you are comfortable with your counter-melody. Optional: practice playing with the recording of the melody so you can hear how your counter-melody sounds with the original melody. Record your counter-melody with the accompaniment track and submit for review. Notate your counter-melody.</li></ol>",
    "Theoretical": '<h3>INSTRUCTIONS</h3>Follow the steps below to compose a 16-bar melody.<ol><li>In the Steps below, write four-bar phrases using half notes, quarter notes, eighth notes, and rests.<ul><li>NOTE: The rests in each bar are color-coordinated (red, green, and blue) so you know from which note bins to choose your notes.</li></ul></li><li>In the "Combined" Step, review all sixteen bars of music you have composed. You can edit this if you wish.</li><li>Record your composition and submit for review.</li></ol>',
    "Exploratory": '<h3>INSTRUCTIONS</h3><ol><li>Write three, one-bar motives using the note bins provided. You may use half notes, quarter notes, eighth notes, and rests. When you have written all three motives, select "Begin Composing." The computer will generate variations of your motives which you can use in the next step. The generated variations will be grouped under tabs labeled with the bin name (e.g. "Tonic").</li><li>Draft your melody by:<ol><li>choosing a bin and clicking its tab to see your motive along with the generated variations.<ul><li>NOTE: The blank staff is color-coordinated with the motives (red, green, and blue).</li></ul></li><li>Find a your preferred measure in in the Variations tab and click anywhere in that measure.</li><li>Click in a measure in the blank staff into which you want the notes to be copied.</li></ol><li>You may edit your final composition draft if you wish.</li><li>Record your composition and submit for review.</li></ol>',
}
NEA_ACT_TYPES = [
    "Melody",
    "Bassline",
    "Create",
    "MelodyPost",
    "BasslinePost",
    "Reflection",
]
NEA_CURRICULA = {
    "Freedom 2040 (Band)": [*NEA_ACT_TYPES, "Connect Green"],
    "Freedom 2040 (Orchestra)": [*NEA_ACT_TYPES, "Connect Green"],
    "Down by the Riverside": [*NEA_ACT_TYPES, "Connect Danyew"],
    "Deep River": [*NEA_ACT_TYPES, "Connect Danyew"],
}


def add_post_perform(apps, schema_editor):
    Activity = apps.get_model("assignments", "Activity")
    ActivityCategory = apps.get_model("assignments", "ActivityCategory")
    ActivityType = apps.get_model("assignments", "ActivityType")
    PartType = apps.get_model("musics", "PartType")

    melody = PartType.objects.get(name="Melody")
    bassline = PartType.objects.get(name="Bassline")

    ctgy, ctgy_created = ActivityCategory.objects.update_or_create(name="PerformPost")
    melody_act_typ, melody_act_typ_created = ActivityType.objects.update_or_create(
        name="MelodyPost", category=ctgy
    )
    bassline_act_typ, bassline_act_typ_created = ActivityType.objects.update_or_create(
        name="BasslinePost", category=ctgy
    )

    melody_act, me_created = Activity.objects.update_or_create(
        activity_type=melody_act_typ,
        body="Please record yourself performing the melody again (now that you have completed the other activities).",
        part_type=melody,
        activity_type_name=melody_act_typ.name,
        category=ctgy.name,
    )
    bassline_act, me_created = Activity.objects.update_or_create(
        activity_type=bassline_act_typ,
        body="Please record yourself performing the bassline again (now that you have completed the other activities).",
        part_type=bassline,
        activity_type_name=bassline_act_typ.name,
        category=ctgy.name,
    )


def add_NEA_create_act_types(apps, schema_editor):
    Activity = apps.get_model("assignments", "Activity")
    ActivityCategory = apps.get_model("assignments", "ActivityCategory")
    ActivityType = apps.get_model("assignments", "ActivityType")
    PartType = apps.get_model("musics", "PartType")

    melody = PartType.objects.get(name="Melody")
    create_ctgy = ActivityCategory.objects.get(name="Create")

    for condition in NEA_CONDITIONS:
        act_type, act_t_created = ActivityType.objects.update_or_create(
            name=condition,
            category=create_ctgy,
        )

        Activity.objects.update_or_create(
            activity_type=act_type,
            body=NEA_INSTRUCTIONS[condition],
            part_type=melody,
            activity_type_name=act_type.name,
            category=create_ctgy.name,
        )


def create_NEA_plans(apps, schema_editor):
    Activity = apps.get_model("assignments", "Activity")
    ActivityType = apps.get_model("assignments", "ActivityType")
    Course = apps.get_model("courses", "Course")
    Curriculum = apps.get_model("assignments", "Curriculum")
    CurriculumEntry = apps.get_model("assignments", "CurriculumEntry")
    Piece = apps.get_model("musics", "Piece")
    PiecePlan = apps.get_model("assignments", "PiecePlan")
    PlannedActivity = apps.get_model("assignments", "PlannedActivity")

    course = Course.objects.get(name="6th Grade Band")

    for cond in NEA_CONDITIONS:
        for piece_name, act_type_names in NEA_CURRICULA.items():
            piece = Piece.objects.get(name=piece_name)
            curriculum, curr_created = Curriculum.objects.update_or_create(
                name=f"NEA-{piece.name}-{cond}", course=course
            )

            # new_create_act = Activity.objects.get(activity_type=act_type)
            new_plan, np_created = PiecePlan.objects.update_or_create(
                name=f"NEA-{piece.name}-{cond}",
                piece=piece,
            )
            for i, act_type_name in enumerate(act_type_names):
                act_type = None
                if act_type_name == "Create":
                    act_type = ActivityType.objects.get(name=cond)
                else:
                    act_type = ActivityType.objects.get(name=act_type_name)

                activity = Activity.objects.get(
                    activity_type=act_type,
                )
                PlannedActivity.objects.update_or_create(
                    piece_plan=new_plan, activity=activity, order=i + 1
                )
            CurriculumEntry.objects.update_or_create(
                curriculum=curriculum, piece_plan=new_plan, order=1
            )


class Migration(migrations.Migration):

    dependencies = [
        ("assignments", "0031_default_piece_plans_20230920_2336"),
        ("musics", "0025_auto_20240223_1015"),
    ]

    operations = [
        migrations.RunPython(add_post_perform, migrations.RunPython.noop),
        migrations.RunPython(add_NEA_create_act_types, migrations.RunPython.noop),
        migrations.RunPython(create_NEA_plans, migrations.RunPython.noop),
    ]
